// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/rest/httpx"
	"net/http"

	"ATM/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/atm/ping",
				Handler: PingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/user/register",
				Handler: UserRegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/user/login",
				Handler: UserLoginHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/atm/user/info",
				Handler: UserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/user/change_password",
				Handler: ChangePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/money/put",
				Handler: PutMoneyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/money/take",
				Handler: TakeMoneyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/api/atm/money/get_transaction",
				Handler: GetTransactionMoneyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/atm/money/transfer",
				Handler: TransferMoneyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}

type Body struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Data    any    `json:"data"`
}

func Response(r *http.Request, w http.ResponseWriter, resp any, err error) {
	body := &Body{
		Code:    0,
		Message: "ok",
		Data:    resp,
	}
	if err != nil {
		body.Code = 1
		body.Message = err.Error()
		logx.WithContext(r.Context()).Errorf("error: %s", err.Error())
	}
	httpx.OkJsonCtx(r.Context(), w, body)
}
